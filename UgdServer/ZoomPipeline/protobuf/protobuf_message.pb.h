// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_5fmessage_2eproto;
namespace fneger {
class Answer;
struct AnswerDefaultTypeInternal;
extern AnswerDefaultTypeInternal _Answer_default_instance_;
class Heartbeat;
struct HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
class Query;
struct QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
}  // namespace fneger
PROTOBUF_NAMESPACE_OPEN
template<> ::fneger::Answer* Arena::CreateMaybeMessage<::fneger::Answer>(Arena*);
template<> ::fneger::Heartbeat* Arena::CreateMaybeMessage<::fneger::Heartbeat>(Arena*);
template<> ::fneger::Query* Arena::CreateMaybeMessage<::fneger::Query>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fneger {

enum QueryCode : int {
  QueryDefaultVersion = 0,
  QueryCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  QueryCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool QueryCode_IsValid(int value);
constexpr QueryCode QueryCode_MIN = QueryDefaultVersion;
constexpr QueryCode QueryCode_MAX = QueryDefaultVersion;
constexpr int QueryCode_ARRAYSIZE = QueryCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueryCode_descriptor();
template<typename T>
inline const std::string& QueryCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QueryCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QueryCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QueryCode_descriptor(), enum_t_value);
}
inline bool QueryCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QueryCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QueryCode>(
    QueryCode_descriptor(), name, value);
}
enum QueryResult : int {
  QuerySucc = 0,
  QueryFailed = 1,
  QueryResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  QueryResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool QueryResult_IsValid(int value);
constexpr QueryResult QueryResult_MIN = QuerySucc;
constexpr QueryResult QueryResult_MAX = QueryFailed;
constexpr int QueryResult_ARRAYSIZE = QueryResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueryResult_descriptor();
template<typename T>
inline const std::string& QueryResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QueryResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QueryResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QueryResult_descriptor(), enum_t_value);
}
inline bool QueryResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QueryResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QueryResult>(
    QueryResult_descriptor(), name, value);
}
// ===================================================================

class Heartbeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fneger.Heartbeat) */ {
 public:
  inline Heartbeat() : Heartbeat(nullptr) {}
  ~Heartbeat() override;
  explicit constexpr Heartbeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heartbeat(const Heartbeat& from);
  Heartbeat(Heartbeat&& from) noexcept
    : Heartbeat() {
    *this = ::std::move(from);
  }

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heartbeat& operator=(Heartbeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Heartbeat& a, Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Heartbeat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heartbeat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Heartbeat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Heartbeat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heartbeat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fneger.Heartbeat";
  }
  protected:
  explicit Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // optional int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // optional int64 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:fneger.Heartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t id_;
  int64_t timestamp_;
  friend struct ::TableStruct_protobuf_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Query final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fneger.Query) */ {
 public:
  inline Query() : Query(nullptr) {}
  ~Query() override;
  explicit constexpr Query(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Query(const Query& from);
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query& operator=(Query&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query& default_instance() {
    return *internal_default_instance();
  }
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }
  inline void Swap(Query* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Query& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Query& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fneger.Query";
  }
  protected:
  explicit Query(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonBodyFieldNumber = 4,
    kIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kQueryCodeFieldNumber = 3,
  };
  // optional string json_body = 4;
  bool has_json_body() const;
  private:
  bool _internal_has_json_body() const;
  public:
  void clear_json_body();
  const std::string& json_body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_body();
  PROTOBUF_NODISCARD std::string* release_json_body();
  void set_allocated_json_body(std::string* json_body);
  private:
  const std::string& _internal_json_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_body(const std::string& value);
  std::string* _internal_mutable_json_body();
  public:

  // optional int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // optional int64 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // optional .fneger.QueryCode query_code = 3;
  bool has_query_code() const;
  private:
  bool _internal_has_query_code() const;
  public:
  void clear_query_code();
  ::fneger::QueryCode query_code() const;
  void set_query_code(::fneger::QueryCode value);
  private:
  ::fneger::QueryCode _internal_query_code() const;
  void _internal_set_query_code(::fneger::QueryCode value);
  public:

  // @@protoc_insertion_point(class_scope:fneger.Query)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_body_;
  int64_t id_;
  int64_t timestamp_;
  int query_code_;
  friend struct ::TableStruct_protobuf_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Answer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fneger.Answer) */ {
 public:
  inline Answer() : Answer(nullptr) {}
  ~Answer() override;
  explicit constexpr Answer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Answer(const Answer& from);
  Answer(Answer&& from) noexcept
    : Answer() {
    *this = ::std::move(from);
  }

  inline Answer& operator=(const Answer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Answer& operator=(Answer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Answer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Answer* internal_default_instance() {
    return reinterpret_cast<const Answer*>(
               &_Answer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Answer& a, Answer& b) {
    a.Swap(&b);
  }
  inline void Swap(Answer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Answer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Answer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Answer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Answer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Answer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Answer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fneger.Answer";
  }
  protected:
  explicit Answer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonBodyFieldNumber = 4,
    kTipsFieldNumber = 6,
    kIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kQueryCodeFieldNumber = 3,
    kResultCodeFieldNumber = 5,
  };
  // optional string json_body = 4;
  bool has_json_body() const;
  private:
  bool _internal_has_json_body() const;
  public:
  void clear_json_body();
  const std::string& json_body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_body();
  PROTOBUF_NODISCARD std::string* release_json_body();
  void set_allocated_json_body(std::string* json_body);
  private:
  const std::string& _internal_json_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_body(const std::string& value);
  std::string* _internal_mutable_json_body();
  public:

  // optional string tips = 6;
  bool has_tips() const;
  private:
  bool _internal_has_tips() const;
  public:
  void clear_tips();
  const std::string& tips() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tips(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tips();
  PROTOBUF_NODISCARD std::string* release_tips();
  void set_allocated_tips(std::string* tips);
  private:
  const std::string& _internal_tips() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tips(const std::string& value);
  std::string* _internal_mutable_tips();
  public:

  // optional int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // optional int64 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // optional .fneger.QueryCode query_code = 3;
  bool has_query_code() const;
  private:
  bool _internal_has_query_code() const;
  public:
  void clear_query_code();
  ::fneger::QueryCode query_code() const;
  void set_query_code(::fneger::QueryCode value);
  private:
  ::fneger::QueryCode _internal_query_code() const;
  void _internal_set_query_code(::fneger::QueryCode value);
  public:

  // optional .fneger.QueryResult result_code = 5;
  bool has_result_code() const;
  private:
  bool _internal_has_result_code() const;
  public:
  void clear_result_code();
  ::fneger::QueryResult result_code() const;
  void set_result_code(::fneger::QueryResult value);
  private:
  ::fneger::QueryResult _internal_result_code() const;
  void _internal_set_result_code(::fneger::QueryResult value);
  public:

  // @@protoc_insertion_point(class_scope:fneger.Answer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tips_;
  int64_t id_;
  int64_t timestamp_;
  int query_code_;
  int result_code_;
  friend struct ::TableStruct_protobuf_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Heartbeat

// optional int64 id = 1;
inline bool Heartbeat::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Heartbeat::has_id() const {
  return _internal_has_id();
}
inline void Heartbeat::clear_id() {
  id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Heartbeat::_internal_id() const {
  return id_;
}
inline int64_t Heartbeat::id() const {
  // @@protoc_insertion_point(field_get:fneger.Heartbeat.id)
  return _internal_id();
}
inline void Heartbeat::_internal_set_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Heartbeat::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fneger.Heartbeat.id)
}

// optional int64 timestamp = 2;
inline bool Heartbeat::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Heartbeat::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Heartbeat::clear_timestamp() {
  timestamp_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t Heartbeat::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t Heartbeat::timestamp() const {
  // @@protoc_insertion_point(field_get:fneger.Heartbeat.timestamp)
  return _internal_timestamp();
}
inline void Heartbeat::_internal_set_timestamp(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void Heartbeat::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:fneger.Heartbeat.timestamp)
}

// -------------------------------------------------------------------

// Query

// optional int64 id = 1;
inline bool Query::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Query::has_id() const {
  return _internal_has_id();
}
inline void Query::clear_id() {
  id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t Query::_internal_id() const {
  return id_;
}
inline int64_t Query::id() const {
  // @@protoc_insertion_point(field_get:fneger.Query.id)
  return _internal_id();
}
inline void Query::_internal_set_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void Query::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fneger.Query.id)
}

// optional int64 timestamp = 2;
inline bool Query::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Query::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Query::clear_timestamp() {
  timestamp_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t Query::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t Query::timestamp() const {
  // @@protoc_insertion_point(field_get:fneger.Query.timestamp)
  return _internal_timestamp();
}
inline void Query::_internal_set_timestamp(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
}
inline void Query::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:fneger.Query.timestamp)
}

// optional .fneger.QueryCode query_code = 3;
inline bool Query::_internal_has_query_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Query::has_query_code() const {
  return _internal_has_query_code();
}
inline void Query::clear_query_code() {
  query_code_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::fneger::QueryCode Query::_internal_query_code() const {
  return static_cast< ::fneger::QueryCode >(query_code_);
}
inline ::fneger::QueryCode Query::query_code() const {
  // @@protoc_insertion_point(field_get:fneger.Query.query_code)
  return _internal_query_code();
}
inline void Query::_internal_set_query_code(::fneger::QueryCode value) {
  _has_bits_[0] |= 0x00000008u;
  query_code_ = value;
}
inline void Query::set_query_code(::fneger::QueryCode value) {
  _internal_set_query_code(value);
  // @@protoc_insertion_point(field_set:fneger.Query.query_code)
}

// optional string json_body = 4;
inline bool Query::_internal_has_json_body() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Query::has_json_body() const {
  return _internal_has_json_body();
}
inline void Query::clear_json_body() {
  json_body_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Query::json_body() const {
  // @@protoc_insertion_point(field_get:fneger.Query.json_body)
  return _internal_json_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Query::set_json_body(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 json_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fneger.Query.json_body)
}
inline std::string* Query::mutable_json_body() {
  std::string* _s = _internal_mutable_json_body();
  // @@protoc_insertion_point(field_mutable:fneger.Query.json_body)
  return _s;
}
inline const std::string& Query::_internal_json_body() const {
  return json_body_.Get();
}
inline void Query::_internal_set_json_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  json_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Query::_internal_mutable_json_body() {
  _has_bits_[0] |= 0x00000001u;
  return json_body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Query::release_json_body() {
  // @@protoc_insertion_point(field_release:fneger.Query.json_body)
  if (!_internal_has_json_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = json_body_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_body_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Query::set_allocated_json_body(std::string* json_body) {
  if (json_body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  json_body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_body,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_body_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fneger.Query.json_body)
}

// -------------------------------------------------------------------

// Answer

// optional int64 id = 1;
inline bool Answer::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Answer::has_id() const {
  return _internal_has_id();
}
inline void Answer::clear_id() {
  id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t Answer::_internal_id() const {
  return id_;
}
inline int64_t Answer::id() const {
  // @@protoc_insertion_point(field_get:fneger.Answer.id)
  return _internal_id();
}
inline void Answer::_internal_set_id(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void Answer::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fneger.Answer.id)
}

// optional int64 timestamp = 2;
inline bool Answer::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Answer::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Answer::clear_timestamp() {
  timestamp_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t Answer::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t Answer::timestamp() const {
  // @@protoc_insertion_point(field_get:fneger.Answer.timestamp)
  return _internal_timestamp();
}
inline void Answer::_internal_set_timestamp(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ = value;
}
inline void Answer::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:fneger.Answer.timestamp)
}

// optional .fneger.QueryCode query_code = 3;
inline bool Answer::_internal_has_query_code() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Answer::has_query_code() const {
  return _internal_has_query_code();
}
inline void Answer::clear_query_code() {
  query_code_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::fneger::QueryCode Answer::_internal_query_code() const {
  return static_cast< ::fneger::QueryCode >(query_code_);
}
inline ::fneger::QueryCode Answer::query_code() const {
  // @@protoc_insertion_point(field_get:fneger.Answer.query_code)
  return _internal_query_code();
}
inline void Answer::_internal_set_query_code(::fneger::QueryCode value) {
  _has_bits_[0] |= 0x00000010u;
  query_code_ = value;
}
inline void Answer::set_query_code(::fneger::QueryCode value) {
  _internal_set_query_code(value);
  // @@protoc_insertion_point(field_set:fneger.Answer.query_code)
}

// optional string json_body = 4;
inline bool Answer::_internal_has_json_body() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Answer::has_json_body() const {
  return _internal_has_json_body();
}
inline void Answer::clear_json_body() {
  json_body_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Answer::json_body() const {
  // @@protoc_insertion_point(field_get:fneger.Answer.json_body)
  return _internal_json_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Answer::set_json_body(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 json_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fneger.Answer.json_body)
}
inline std::string* Answer::mutable_json_body() {
  std::string* _s = _internal_mutable_json_body();
  // @@protoc_insertion_point(field_mutable:fneger.Answer.json_body)
  return _s;
}
inline const std::string& Answer::_internal_json_body() const {
  return json_body_.Get();
}
inline void Answer::_internal_set_json_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  json_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Answer::_internal_mutable_json_body() {
  _has_bits_[0] |= 0x00000001u;
  return json_body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Answer::release_json_body() {
  // @@protoc_insertion_point(field_release:fneger.Answer.json_body)
  if (!_internal_has_json_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = json_body_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_body_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Answer::set_allocated_json_body(std::string* json_body) {
  if (json_body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  json_body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_body,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_body_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fneger.Answer.json_body)
}

// optional .fneger.QueryResult result_code = 5;
inline bool Answer::_internal_has_result_code() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Answer::has_result_code() const {
  return _internal_has_result_code();
}
inline void Answer::clear_result_code() {
  result_code_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::fneger::QueryResult Answer::_internal_result_code() const {
  return static_cast< ::fneger::QueryResult >(result_code_);
}
inline ::fneger::QueryResult Answer::result_code() const {
  // @@protoc_insertion_point(field_get:fneger.Answer.result_code)
  return _internal_result_code();
}
inline void Answer::_internal_set_result_code(::fneger::QueryResult value) {
  _has_bits_[0] |= 0x00000020u;
  result_code_ = value;
}
inline void Answer::set_result_code(::fneger::QueryResult value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:fneger.Answer.result_code)
}

// optional string tips = 6;
inline bool Answer::_internal_has_tips() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Answer::has_tips() const {
  return _internal_has_tips();
}
inline void Answer::clear_tips() {
  tips_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Answer::tips() const {
  // @@protoc_insertion_point(field_get:fneger.Answer.tips)
  return _internal_tips();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Answer::set_tips(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 tips_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fneger.Answer.tips)
}
inline std::string* Answer::mutable_tips() {
  std::string* _s = _internal_mutable_tips();
  // @@protoc_insertion_point(field_mutable:fneger.Answer.tips)
  return _s;
}
inline const std::string& Answer::_internal_tips() const {
  return tips_.Get();
}
inline void Answer::_internal_set_tips(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tips_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Answer::_internal_mutable_tips() {
  _has_bits_[0] |= 0x00000002u;
  return tips_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Answer::release_tips() {
  // @@protoc_insertion_point(field_release:fneger.Answer.tips)
  if (!_internal_has_tips()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = tips_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tips_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tips_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Answer::set_allocated_tips(std::string* tips) {
  if (tips != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tips_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tips,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tips_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tips_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fneger.Answer.tips)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fneger

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fneger::QueryCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fneger::QueryCode>() {
  return ::fneger::QueryCode_descriptor();
}
template <> struct is_proto_enum< ::fneger::QueryResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fneger::QueryResult>() {
  return ::fneger::QueryResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_5fmessage_2eproto
